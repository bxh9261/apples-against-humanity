The full text of my development journal, complete with my 10th grade sense of humor.

Journal 12-MAY:
Today, my project was approved, although I discovered that attempting to incorporate LAN would be difficult. I began going through a tutorial on Oracle about GUI, there I learned the basics of javax.swing, particularly the JFrame class. I complied and ran a given code that displayed a window that said "Hello World" and attempted to understand the code with a little success. I installed a drag-and-drop GUI add-on for Eclipse that would help with the next tutorial, a Celsius converter applet. 
Journal 14-MAY:
I ditched the tutorial with the Celsius converter because it only explained with Netbeans. I found a new tutorial with an Eclipse GUI tool called Jigloo. I then spent the next half hour trying to install Jigloo, because the download page wasn't clear about where to extract the folders to. After figuring that out, I walked through the new tutorial and learned how to use JButtons, JLabels, and other JThings to create a window that allowed a user to type in their name, then it would display a text box that said hello and their name. Then I modified it with buttons that make it say hi in French and Swedish.
Journal 15-MAY:
I decided to try working on my own GUI-learning project, so I tried my hand at making the Celsius Converter using Jigloo. (I think it was supposed to be C to F and I did it backwards but oh well). Today I learned that there are different layouts for putting down buttons and it took me a bit to find the one that allowed the buttons to be moved freely without being constrained to a side. I learned that buttons use private handler methods and that the button, label, and text box I teams I created were all instantiated as objects with various methods to manipulate them. I used getText(), setText(), and also Double's parseDouble() to write the method for the convert button. There was also a fire drill today, during which I learned that it is hot outside. 
Journal 16-MAY:
Today I began working on code for my Apples-to-Apples game. I created a main menu, with a text box that lets a user give how many players will be playing the game. It error checks the input so that the user can’t enter a number below 4 or above 12, and calls the user bad names and tells them to try again if they do. I’m still working on having it check to make sure it’s an int rather than throwing an exception, and then I will try to find out how to make the button open the main game window. 
Journal 20-MAY: 
Java was giving me some weird errors because Jigloo was deleted from that version of eclipse over the weekend, so I had to reinstall it, which took up a solid chunk of class.  I then set up the button on the main menu to open the game view when "play" is pressed but decided I didn't like that, and created a SettingsWindow class, so I could run the main game and the user could change the settings on there.
Journal 21-MAY: 
I began setting up an interface on the main game menu. I created a Player class with a variable for name and number of wins for a table showing how many wins each player has, but I have not yet made the table. I then put a settings button on the main game interface which would open up the settings window, and began adding the ability to change the name of the user and CPU players, but I was still fumbling with the numbers to get the boxes even when class ended. However during that fumbling, I learned that the first number in setBounds() is distance from the left side, 2nd is distance from top, 3rd is width and 4th is height.
Journal 22-MAY:
I did a lot of coding without Jigloo since dragging boxes with that thing causes me great misery, as do text boxes that aren’t all congruent. I added all the text boxes and elements for the settings window and made the code nicer so that all the text boxes are with the text boxes and JLabels with the JLabels. I also set the default number of players to 4 so people can play without changing the settings. I added a getWins(), getName(), and win() method to Player. The win() method simply adds 1 to the Player’s private instance variable for wins.
Journal 28-MAY:
I began adding JButtons that will be used as the red cards. I used JButtons so that they could perform an action when they are clicked. I tried to find an image of a red Apples to Apples card to use, but I didn't see anything, and decided I should work on functionality before I make it pretty. I made it so each of the buttons would disappear when clicked, and the text on them would be stored. Right now the text is just "Example Text" and I'm not doing anything with the stored variables.
Journal 29-MAY:
I made a public method in the SettingsWindow class called getPlayers() which returned an ArrayList of Strings of the player's names. I made a private variable of a SettingsWindow called set in GameView so that I could call the SettingsWindow methods. I later changed getPlayers() so that it would return Player objects instead of Strings, but I didn't know how to import Player from the "Elements" source folder. Alex came by and told me I shouldn’t use source folders.
Journal 30-MAY:
I made it so that makePlayers() could be called every time the settings window is closed. Alex helped me connect the GameView and the SettingsWindow with a public static variable. I successfully added the Apple image and a bunch of JLabels for the leaderboard table.
Journal 3-JUN:
I first had to do some reinstallation things with Jigloo because it’s a dingus. I then added more JLabels for the leader board and attempted to make it so that it would only display the amount of players that are playing, but it didn’t work well.
Journal 4-JUN:
The leader board wasn’t working yesterday because I have alligator problems. I had put the sign backwards on some so that Player 7, 8, and 9 only showed up when the number of players was less than 7. But I fixed that, and then I made a place for the green card to go and added some visuals around it.
Journal 5-JUN:
I made a CardPack interface and then added a class called “MrsMillersClass” that implements it (It will have cards with AP Comp Sci-related inside jokes). I added some ideas I thought of for red cards, then used the getARedCard() method I made to get a random String and added it to a card on the GUI. It worked.
